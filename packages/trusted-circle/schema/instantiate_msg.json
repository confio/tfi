{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "allow_end_early",
    "escrow_amount",
    "initial_members",
    "name",
    "quorum",
    "threshold",
    "voting_period"
  ],
  "properties": {
    "allow_end_early": {
      "description": "If true, and absolute threshold and quorum are met, we can end before voting period finished. (Recommended value: true, unless you have special needs)",
      "type": "boolean"
    },
    "escrow_amount": {
      "description": "The required escrow amount, in the default denom (utgd)",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "initial_members": {
      "description": "List of non-voting members to be added to the DSO upon creation",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "name": {
      "description": "DSO Name",
      "type": "string"
    },
    "quorum": {
      "description": "Default voting quorum percentage (0-100)",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "threshold": {
      "description": "Default voting threshold percentage (0-100)",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "voting_period": {
      "description": "Voting period in days",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    }
  },
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}

{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Nullable_EscrowStatus",
  "anyOf": [
    {
      "$ref": "#/definitions/EscrowStatus"
    },
    {
      "type": "null"
    }
  ],
  "definitions": {
    "EscrowStatus": {
      "description": "We store escrow and status together for all members. This is set for any address where weight is not None.",
      "type": "object",
      "required": [
        "paid",
        "status"
      ],
      "properties": {
        "paid": {
          "description": "how much escrow they have paid",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "status": {
          "description": "voter status. we check this to see what functionality are allowed for this member",
          "allOf": [
            {
              "$ref": "#/definitions/MemberStatus"
            }
          ]
        }
      }
    },
    "MemberStatus": {
      "anyOf": [
        {
          "description": "Normal member, not allowed to vote",
          "type": "object",
          "required": [
            "non_voting"
          ],
          "properties": {
            "non_voting": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Approved for voting, need to pay in",
          "type": "object",
          "required": [
            "pending"
          ],
          "properties": {
            "pending": {
              "type": "object",
              "required": [
                "proposal_id"
              ],
              "properties": {
                "proposal_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Approved for voting, and paid in. Waiting for rest of batch",
          "type": "object",
          "required": [
            "pending_paid"
          ],
          "properties": {
            "pending_paid": {
              "type": "object",
              "required": [
                "proposal_id"
              ],
              "properties": {
                "proposal_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Full-fledged voting member",
          "type": "object",
          "required": [
            "voting"
          ],
          "properties": {
            "voting": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Marked as leaving. Escrow frozen until `claim_at`",
          "type": "object",
          "required": [
            "leaving"
          ],
          "properties": {
            "leaving": {
              "type": "object",
              "required": [
                "claim_at"
              ],
              "properties": {
                "claim_at": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
